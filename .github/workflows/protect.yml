name: Apply Branch Protection

on:
  schedule:
    - cron: '*/5 * * * *'  # каждые 5 минут
  workflow_dispatch:        # запуск вручную

jobs:
  protect-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests

      - name: Run Protection Script
        env:
          GITHUB_USER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          import os, requests, sys
          GITHUB_USER = os.environ.get("GITHUB_USER")
          GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")
          BRANCH_TO_PROTECT = "main"
          PROTECTION_PAYLOAD = {
              "enforce_admins": True,
              "required_pull_request_reviews": {
                  "required_approving_review_count": 1,
                  "dismiss_stale_reviews": True,
                  "require_code_owner_reviews": False,
              },
              "required_status_checks": None,
              "restrictions": None,
              "allow_force_pushes": False,
              "allow_deletions": False,
          }

          def apply_protection():
              if not GITHUB_USER or not GITHUB_TOKEN:
                  print("❌ Нет токена")
                  sys.exit(1)

              headers = {
                  "Authorization": f"token {GITHUB_TOKEN}",
                  "Accept": "application/vnd.github.v3+json",
              }

              repos_url = f"https://api.github.com/users/{GITHUB_USER}/repos"
              page = 1
              repos = []
              while True:
                  r = requests.get(repos_url, headers=headers, params={"page": page, "per_page": 100})
                  if r.status_code != 200: sys.exit(1)
                  data = r.json()
                  if not data: break
                  repos.extend(data)
                  page += 1

              for repo in repos:
                  if repo["archived"]: continue
                  repo_name = repo["name"]

                  branches_url = f"https://api.github.com/repos/{GITHUB_USER}/{repo_name}/branches"
                  br = requests.get(branches_url, headers=headers)
                  if br.status_code != 200: continue

                  names = [b["name"] for b in br.json()]
                  target = BRANCH_TO_PROTECT if BRANCH_TO_PROTECT in names else ("master" if "master" in names else None)
                  if not target: continue

                  url = f"https://api.github.com/repos/{GITHUB_USER}/{repo_name}/branches/{target}/protection"
                  put = requests.put(url, headers=headers, json=PROTECTION_PAYLOAD)
                  print(f"{repo_name}/{target} → {put.status_code}")

          if __name__ == "__main__":
              apply_protection()
