# –ò–º—è –≤–æ—Ä–∫—Ñ–ª–æ—É
name: Automated Branch Protector

# –£—Å–ª–æ–≤–∏—è –∑–∞–ø—É—Å–∫–∞
on:
  schedule:
        - cron: '0 */18 * * *'
  workflow_dispatch:


jobs:
  protect-all-repositories:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      # –®–∞–≥ 1: –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –∑–∞—â–∏—Ç—ã –≤–µ—Ç–æ–∫
      - name: Find Repos, Branches and Apply Protection
        # –î–∞–µ–º —ç—Ç–æ–º—É —à–∞–≥—É ID, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        id: protection_step
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GITHUB_USER: ${{ github.repository_owner }}
          PROTECTION_RULES: |
            {
              "enforce_admins": true,
              "required_pull_request_reviews": {
                "required_approving_review_count": 1,
                "dismiss_stale_reviews": true
              },
              "required_status_checks": null,
              "restrictions": null,
              "allow_force_pushes": false,
              "allow_deletions": false
            }
        run: |
          # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ-—Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
          protected_list=""
          skipped_count=0
          newly_protected_count=0
          error_count=0
          
          echo "–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤..."
          API_RESPONSE_FILE=$(mktemp)
          HTTP_STATUS=$(curl -s -w "%{http_code}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/users/$GITHUB_USER/repos?type=owner&per_page=100" \
            -o $API_RESPONSE_FILE)

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: $HTTP_STATUS"
            cat $API_RESPONSE_FILE
            exit 1
          fi

          echo "‚úÖ –°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω."
          REPO_NAMES=$(cat $API_RESPONSE_FILE | jq -r '.[] | select(.archived==false and .name!=".github") | .name')
          rm $API_RESPONSE_FILE

          # --- –í–°–Ø –ü–†–ï–î–´–î–£–©–ê–Ø –õ–û–ì–ò–ö–ê –û–°–¢–ê–ï–¢–°–Ø –ù–ê –ú–ï–°–¢–ï ---
          for REPO in $REPO_NAMES; do
            echo "-------------------------------------"
            echo "--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $REPO ---"
            
            BRANCHES_API_RESPONSE_FILE=$(mktemp)
            BRANCHES_HTTP_STATUS=$(curl -s -w "%{http_code}" \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$GITHUB_USER/$REPO/branches" \
              -o $BRANCHES_API_RESPONSE_FILE)

            if [ "$BRANCHES_HTTP_STATUS" -ne 200 ]; then
              echo "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫ –¥–ª—è '$REPO'. –ö–æ–¥: $BRANCHES_HTTP_STATUS."
              error_count=$((error_count+1))
              rm $BRANCHES_API_RESPONSE_FILE
              continue
            fi

            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ç–∫—É 'main'
            BRANCH_NAMES=$(cat $BRANCHES_API_RESPONSE_FILE | jq -r '.[] | select(.name=="main") | .name')
            rm $BRANCHES_API_RESPONSE_FILE

            if [ -z "$BRANCH_NAMES" ]; then
              echo "‚û°Ô∏è –ü–†–û–ü–£–°–ö: –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ '$REPO' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–µ—Ç–∫–∏ 'main'."
              continue
            fi
            
            for BRANCH in $BRANCH_NAMES; do
              echo " - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ç–∫–∏: '$BRANCH'..."
              PROTECTION_CHECK_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
                -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$GITHUB_USER/$REPO/branches/$BRANCH/protection")

              if [ "$PROTECTION_CHECK_CODE" = "200" ]; then
                echo " ‚úÖ –ü–†–û–ü–£–°–ö: –í–µ—Ç–∫–∞ '$BRANCH' —É–∂–µ –∑–∞—â–∏—â–µ–Ω–∞."
                skipped_count=$((skipped_count+1))
              elif [ "$PROTECTION_CHECK_CODE" = "404" ]; then
                echo " ‚è≥ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ó–ê–©–ò–¢–´ –¥–ª—è –≤–µ—Ç–∫–∏ '$BRANCH'..."
                APPLY_PROTECTION_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X PUT \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -d "$PROTECTION_RULES" \
                  "https://api.github.com/repos/$GITHUB_USER/$REPO/branches/$BRANCH/protection")

                if [ "$APPLY_PROTECTION_CODE" = "200" ]; then
                  echo " ‚úÖ –£–°–ü–ï–•: –ó–∞—â–∏—Ç–∞ –¥–ª—è –≤–µ—Ç–∫–∏ '$BRANCH' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞."
                  protected_list="$protected_list\n- \`$REPO\` / \`$BRANCH\`"
                  newly_protected_count=$((newly_protected_count+1))
                else
                  echo " ‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞—â–∏—Ç—É –¥–ª—è '$BRANCH'. –ö–æ–¥: $APPLY_PROTECTION_CODE."
                  error_count=$((error_count+1))
                fi
              else
                echo " ‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã –¥–ª—è '$BRANCH'. –ö–æ–¥: $PROTECTION_CHECK_CODE."
                error_count=$((error_count+1))
              fi
            done
          done

          # --- –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –§–†–ê–ì–ú–ï–ù–¢: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ --
          echo "protected_list<<EOF" >> $GITHUB_OUTPUT
          echo -e "$protected_list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "skipped_count=$skipped_count" >> $GITHUB_OUTPUT
          echo "newly_protected_count=$newly_protected_count" >> $GITHUB_OUTPUT
          echo "error_count=$error_count" >> $GITHUB_OUTPUT

      # –®–∞–≥ 2: –ù–æ–≤—ã–π —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç
      - name: Generate Job Summary
        # `if: always()` –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞—Å—Ç—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
        if: always()
        run: |
          echo "### üõ°Ô∏è –û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ Automated Branch Protector" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # –ö—Ä–∞—Å–∏–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
          echo "| –°—Ç–∞—Ç—É—Å | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ |" >> $GITHUB_STEP_SUMMARY
          echo "|:---|:---|" >> $GITHUB_STEP_SUMMARY
          echo "| ‚úÖ –ù–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ | **${{ steps.protection_step.outputs.newly_protected_count }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚û°Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –∑–∞—â–∏—â–µ–Ω—ã) | **${{ steps.protection_step.outputs.skipped_count }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫ | **${{ steps.protection_step.outputs.error_count }}** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # –ï—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞—â–∏—Ç—ã, –≤—ã–≤–æ–¥–∏–º –∏—Ö —Å–ø–∏—Å–æ–∫
          if [ "${{ steps.protection_step.outputs.newly_protected_count }}" -gt 0 ]; then
            echo "---" >> $GITHUB_STEP_SUMMARY
            echo "#### –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—â–∏—Ç:" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.protection_step.outputs.protected_list }}" >> $GITHUB_STEP_SUMMARY
          # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–ª–∏, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
          elif [ "${{ steps.protection_step.outputs.newly_protected_count }}" -eq 0 ] && [ "${{ steps.protection_step.outputs.error_count }}" -eq 0 ]; then
            echo "> –ù–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å. –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏ 'main' —É–∂–µ –±—ã–ª–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π." >> $GITHUB_STEP_SUMMARY
          fi