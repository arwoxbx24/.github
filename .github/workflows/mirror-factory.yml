name: Mirror Factory and Sync (GitLab Only)

on:
  schedule:
        - cron: '0 */18 * * *'
  workflow_dispatch:

jobs:
  mirror-and-sync:
    runs-on: ubuntu-latest
        permissions:
      administration: write
    steps:
      - name: GitLab Sync Action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLAB_PAT: ${{ secrets.GITLAB_PAT }}
          GITLAB_HOST: "gitlab.com"
          GH_USER: ${{ github.repository_owner }}
        run: |
          set -e

          get_gitlab_user() {
            curl -s --header "PRIVATE-TOKEN: ${GITLAB_PAT}" "https://${GITLAB_HOST}/api/v4/user" | jq -r '.username'
          }

          get_gitlab_project() {
            local mirror_name=$1
            curl -s --header "PRIVATE-TOKEN: ${GITLAB_PAT}" "https://${GITLAB_HOST}/api/v4/projects?search=${mirror_name}" | jq --arg name "${mirror_name}" '.[] | select(.name == $name)'
          }

          archive_gitlab_project() {
            local project_id=$1
            echo "Archiving GitLab project ID: $project_id"
            curl -s --request POST --header "PRIVATE-TOKEN: ${GITLAB_PAT}" "https://${GITLAB_HOST}/api/v4/projects/${project_id}/archive"
          }

          unarchive_gitlab_project() {
            local project_id=$1
            echo "Unarchiving GitLab project ID: $project_id"
            curl -s --request POST --header "PRIVATE-TOKEN: ${GITLAB_PAT}" "https://${GITLAB_HOST}/api/v4/projects/${project_id}/unarchive"
          }

          create_gitlab_project() {
            local mirror_name=$1
            echo "Creating GitLab project: ${mirror_name}"
            curl -s --request POST --header "PRIVATE-TOKEN: ${GITLAB_PAT}" \
              --data "name=${mirror_name}&visibility=private" \
              "https://${GITLAB_HOST}/api/v4/projects" | jq -r '.id'
          }

          protect_github_branch() {
            local repo_name=$1
            echo "--- Protecting main branch for ${repo_name} ---"
                        protection_status=$(gh api "/repos/${GH_USER}/${repo_name}/branches/main/protection" --jq '.enforce_admins.enabled' || echo "not_found")
            if [ "$protection_status" == "true" ]; then
                echo "✅ Branch 'main' is already protected."
                return
            fi
            gh api --method PUT "/repos/${GH_USER}/${repo_name}/branches/main/protection" \
              -f enforce_admins=true \
              -f 'required_pull_request_reviews[required_approving_review_count]=1' \
              -f restrictions=null \
              -f required_status_checks=null \
              --silent || echo "⚠️ Could not protect main branch. It may not exist yet."
            echo "✅ Branch protection rule applied for main branch."
          }

          sync_repo() {
            local repo_name=$1
            local mirror_name="${repo_name}-mirror"
            local gitlab_user=$(get_gitlab_user)
            echo "--- Syncing ${repo_name} to GitLab ---"
            local gl_project_json=$(get_gitlab_project $mirror_name)
            local gl_project_id=$(echo "$gl_project_json" | jq -r '.id')
            local gl_project_archived=$(echo "$gl_project_json" | jq -r '.archived')
            if [ -z "$gl_project_id" ] || [ "$gl_project_id" == "null" ]; then
              echo "GitLab project not found, creating..."
              gl_project_id=$(create_gitlab_project $mirror_name)
              if [ "$gl_project_id" == "null" ] || [ -z "$gl_project_id" ]; then
                echo "❌ Failed to create GitLab project for $mirror_name"
                return 1
              fi
            elif [ "$gl_project_archived" == "true" ]; then
                echo "GitLab project is archived, unarchiving..."
                unarchive_gitlab_project $gl_project_id
            fi
            echo "Cloning from GitHub and pushing to GitLab..."
            TMP_DIR=$(mktemp -d)
            git clone --mirror "https://oauth2:${GITHUB_TOKEN}@github.com/${GH_USER}/${repo_name}.git" "$TMP_DIR"
            cd "$TMP_DIR"
            git remote set-url origin "https://${gitlab_user}:${GITLAB_PAT}@${GITLAB_HOST}/${gitlab_user}/${mirror_name}.git"
            git push --mirror
            cd ..
            rm -rf "$TMP_DIR"
            echo "✅ Successfully synced ${repo_name} to ${mirror_name} on GitLab."
          }

          echo "Scheduled or manual sync triggered. Syncing all repositories."
          owner_type=$(gh api "/users/${GH_USER}" --jq '.type' || echo "User")
          if [ "$owner_type" == "Organization" ]; then
            repos_url="/orgs/${GH_USER}/repos"
          else
            repos_url="/users/${GH_USER}/repos"
          fi
          
          echo "Fetching all repos from ${repos_url}..."
                    gh repo list ${GH_USER} --limit 1000 --json name --jq 'map(select(.name != ".github" and (.name | endswith("-mirror") | not))) | .[] | .name' | while read -r repo_name; do
            echo "========================================="
            echo "Processing repository: ${repo_name}"
            repo_details=$(gh repo view ${GH_USER}/${repo_name} --json isArchived,defaultBranchRef)
            is_archived=$(echo "$repo_details" | jq -r '.isArchived')
            default_branch=$(echo "$repo_details" | jq -r '.defaultBranchRef.name')
            if [ "$is_archived" == "true" ]; then
              mirror_name="${repo_name}-mirror"
              project_json=$(get_gitlab_project $mirror_name)
              project_id=$(echo "$project_json" | jq -r '.id')
              project_archived=$(echo "$project_json" | jq -r '.archived')
              if [ -n "$project_id" ] && [ "$project_id" != "null" ] && [ "$project_archived" != "true" ]; then
                echo "--- GitHub repo is archived, archiving GitLab mirror for ${repo_name} ---"
                archive_gitlab_project $project_id
              else
                echo "--- GitLab mirror for ${repo_name} is already archived or does not exist. Skipping. ---"
              fi
            else
              sync_repo "$repo_name"
              if [ -n "$default_branch" ] && [ "$default_branch" != "null" ]; then
                protect_github_branch "$repo_name"
              else
                echo "⚠️ No default branch found for ${repo_name}. Cannot apply protection."
              fi
            fi
          done
          echo "========================================="
          echo "✅ Full sync complete."