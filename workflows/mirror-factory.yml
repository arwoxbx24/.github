name: Mirror Factory and Sync (GitLab Only)

on:
  push:
    branches:
      - main
  repository:
    types: [archived, unarchived, deleted]
  workflow_dispatch:

jobs:
  mirror-and-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Get Event Information
        id: get_info
        run: |
          if [[ "${{ github.event_name }}" == "repository" ]]; then
            echo "repo_name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
            echo "action=${{ github.event.action }}" >> $GITHUB_OUTPUT
            echo "repo_archived=${{ github.event.repository.archived }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "repo_name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
            echo "action=push" >> $GITHUB_OUTPUT
            echo "repo_archived=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "repo_name=ALL" >> $GITHUB_OUTPUT
            echo "action=sync_all" >> $GITHUB_OUTPUT
            echo "repo_archived=false" >> $GITHUB_OUTPUT
          fi

      - name: GitLab Sync Action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLAB_PAT: ${{ secrets.GITLAB_PAT }}
          GH_USER: ${{ github.repository_owner }}
          REPO_NAME: ${{ steps.get_info.outputs.repo_name }}
          ACTION: ${{ steps.get_info.outputs.action }}
          REPO_ARCHIVED: ${{ steps.get_info.outputs.repo_archived }}
        run: |
          # --- Helper Functions ---
          get_gitlab_user() {
            curl -s --header "PRIVATE-TOKEN: ${GITLAB_PAT}" "https://gitlab.com/api/v4/user" | jq -r '.username'
          }

          get_gitlab_project() {
            local mirror_name=$1
            curl -s --header "PRIVATE-TOKEN: ${GITLAB_PAT}" "https://gitlab.com/api/v4/projects?search=${mirror_name}" | jq --arg name "${mirror_name}" '.[] | select(.name == $name)'
          }

          archive_gitlab_project() {
            local project_id=$1
            echo "Archiving GitLab project ID: $project_id"
            curl -s --request POST --header "PRIVATE-TOKEN: ${GITLAB_PAT}" "https://gitlab.com/api/v4/projects/${project_id}/archive"
          }

          unarchive_gitlab_project() {
            local project_id=$1
            echo "Unarchiving GitLab project ID: $project_id"
            curl -s --request POST --header "PRIVATE-TOKEN: ${GITLAB_PAT}" "https://gitlab.com/api/v4/projects/${project_id}/unarchive"
          }

          create_gitlab_project() {
            local mirror_name=$1
            echo "Creating GitLab project: ${mirror_name}"
            curl -s --request POST --header "PRIVATE-TOKEN: ${GITLAB_PAT}" \
              --data "name=${mirror_name}&visibility=private" \
              "https://gitlab.com/api/v4/projects" | jq -r '.id'
          }

          sync_repo() {
            local repo_name=$1
            local mirror_name="${repo_name}-mirror"
            local gitlab_user=$(get_gitlab_user)

            echo "--- Syncing ${repo_name} to GitLab ---" 
            
            local gl_project_json=$(get_gitlab_project $mirror_name)
            local gl_project_id=$(echo "$gl_project_json" | jq -r '.id')
            local gl_project_archived=$(echo "$gl_project_json" | jq -r '.archived')

            if [ -z "$gl_project_id" ] || [ "$gl_project_id" == "null" ]; then
              gl_project_id=$(create_gitlab_project $mirror_name)
              if [ "$gl_project_id" == "null" ] || [ -z "$gl_project_id" ]; then
                echo "❌ Failed to create GitLab project for $mirror_name"
                return 1
              fi
            elif [ "$gl_project_archived" == "true" ]; then
                unarchive_gitlab_project $gl_project_id
            fi

            echo "Cloning from GitHub and pushing to GitLab..."
            git clone --mirror "https://oauth2:${GITHUB_TOKEN}@github.com/${GH_USER}/${repo_name}.git"
            cd "${repo_name}.git"
            git remote set-url origin "https://${gitlab_user}:${GITLAB_PAT}@gitlab.com/${gitlab_user}/${mirror_name}.git"
            git push --mirror
            cd ..
            rm -rf "${repo_name}.git"
            echo "✅ Successfully synced ${repo_name} to ${mirror_name} on GitLab."
          }

          # --- Main Logic ---
          if [[ "$ACTION" == "archived" || "$ACTION" == "deleted" ]]; then
            echo "GitHub repository '$REPO_NAME' was ${ACTION}. Archiving GitLab mirror."
            mirror_name="${REPO_NAME}-mirror"
            project_id=$(get_gitlab_project_id $mirror_name | jq -r '.id')
            if [ -n "$project_id" ] && [ "$project_id" != "null" ]; then
              archive_gitlab_project $project_id
              echo "✅ GitLab project ${mirror_name} archived."
            else
              echo "⚠️ GitLab mirror '${mirror_name}' not found. Nothing to archive."
            fi
          elif [[ "$ACTION" == "unarchived" ]]; then
            echo "GitHub repository '$REPO_NAME' was unarchived. Unarchiving GitLab mirror and syncing."
            sync_repo "$REPO_NAME"
          elif [[ "$ACTION" == "push" ]]; then
            if [[ "$REPO_ARCHIVED" == "false" ]]; then
              echo "Push event to non-archived repo '$REPO_NAME'. Syncing to GitLab."
              sync_repo "$REPO_NAME"
            else
              echo "Push event to archived repo '$REPO_NAME'. Skipping sync."
            fi
          elif [[ "$ACTION" == "sync_all" ]]; then
            echo "Manual sync triggered. Syncing all non-archived repositories."
            gh_repos=$(gh api "/orgs/${GH_USER}/repos" --jq '.[] | select(.archived==false and .name != ".github" and (.name | endswith("-mirror") | not)) | .name')
            for repo in $gh_repos; do
              sync_repo "$repo"
            done
            echo "Syncing archived repositories statuses."
            archived_gh_repos=$(gh api "/orgs/${GH_USER}/repos?type=all" --paginate --jq '.[] | select(.archived==true and .name != ".github") | .name')
            for repo in $archived_gh_repos; do
                mirror_name="${repo}-mirror"
                project_id=$(get_gitlab_project_id $mirror_name | jq -r '.id')
                if [ -n "$project_id" ] && [ "$project_id" != "null" ]; then
                  archive_gitlab_project $project_id
                fi
            done
          fi
